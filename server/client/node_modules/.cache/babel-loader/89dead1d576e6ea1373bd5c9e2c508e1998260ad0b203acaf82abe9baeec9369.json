{"ast":null,"code":"import React,{useEffect,useState}from'react';import io from'socket.io-client';// Import the socket.io client\n// Connect to the backend server\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const socket=io('http://localhost:5000');// Adjust this URL if needed\nconst ParkingGarages=()=>{const[garages,setGarages]=useState([]);useEffect(()=>{// Fetch initial data from the backend\nfetch('/api/garages').then(response=>response.json()).then(data=>setGarages(data)).catch(err=>console.log(\"Error fetching data:\",err));// Listen for real-time parking updates from the server\nsocket.on('parkingUpdate',updatedGarage=>{setGarages(prevGarages=>prevGarages.map(garage=>garage._id===updatedGarage._id?updatedGarage:garage));});// Cleanup the socket connection when the component is unmounted\nreturn()=>socket.off('parkingUpdate');},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Parking Garages\"}),/*#__PURE__*/_jsx(\"ul\",{children:garages.map(garage=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:garage.name}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Available Spots: \",garage.availableSpots]})]},garage._id))})]});};export default ParkingGarages;","map":{"version":3,"names":["React","useEffect","useState","io","jsx","_jsx","jsxs","_jsxs","socket","ParkingGarages","garages","setGarages","fetch","then","response","json","data","catch","err","console","log","on","updatedGarage","prevGarages","map","garage","_id","off","children","name","availableSpots"],"sources":["/workspaces/WebDev/server/client/src/components/ParkingGarages.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client'; // Import the socket.io client\n\n// Connect to the backend server\nconst socket = io('http://localhost:5000'); // Adjust this URL if needed\n\nconst ParkingGarages = () => {\n  const [garages, setGarages] = useState([]);\n  \n  useEffect(() => {\n    // Fetch initial data from the backend\n    fetch('/api/garages')\n      .then(response => response.json())\n      .then(data => setGarages(data))\n      .catch(err => console.log(\"Error fetching data:\", err));\n\n    // Listen for real-time parking updates from the server\n    socket.on('parkingUpdate', (updatedGarage) => {\n      setGarages(prevGarages =>\n        prevGarages.map(garage =>\n          garage._id === updatedGarage._id ? updatedGarage : garage\n        )\n      );\n    });\n\n    // Cleanup the socket connection when the component is unmounted\n    return () => socket.off('parkingUpdate');\n  }, []);\n\n  return (\n    <div>\n      <h2>Parking Garages</h2>\n      <ul>\n        {garages.map(garage => (\n          <li key={garage._id}>\n            <h3>{garage.name}</h3>\n            <p>Available Spots: {garage.availableSpots}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ParkingGarages;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CAAE;AAEnC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,MAAM,CAAGL,EAAE,CAAC,uBAAuB,CAAC,CAAE;AAE5C,KAAM,CAAAM,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAE1CD,SAAS,CAAC,IAAM,CACd;AACAW,KAAK,CAAC,cAAc,CAAC,CAClBC,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAIL,UAAU,CAACK,IAAI,CAAC,CAAC,CAC9BC,KAAK,CAACC,GAAG,EAAIC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEF,GAAG,CAAC,CAAC,CAEzD;AACAV,MAAM,CAACa,EAAE,CAAC,eAAe,CAAGC,aAAa,EAAK,CAC5CX,UAAU,CAACY,WAAW,EACpBA,WAAW,CAACC,GAAG,CAACC,MAAM,EACpBA,MAAM,CAACC,GAAG,GAAKJ,aAAa,CAACI,GAAG,CAAGJ,aAAa,CAAGG,MACrD,CACF,CAAC,CACH,CAAC,CAAC,CAEF;AACA,MAAO,IAAMjB,MAAM,CAACmB,GAAG,CAAC,eAAe,CAAC,CAC1C,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEpB,KAAA,QAAAqB,QAAA,eACEvB,IAAA,OAAAuB,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxBvB,IAAA,OAAAuB,QAAA,CACGlB,OAAO,CAACc,GAAG,CAACC,MAAM,eACjBlB,KAAA,OAAAqB,QAAA,eACEvB,IAAA,OAAAuB,QAAA,CAAKH,MAAM,CAACI,IAAI,CAAK,CAAC,cACtBtB,KAAA,MAAAqB,QAAA,EAAG,mBAAiB,CAACH,MAAM,CAACK,cAAc,EAAI,CAAC,GAFxCL,MAAM,CAACC,GAGZ,CACL,CAAC,CACA,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAjB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}